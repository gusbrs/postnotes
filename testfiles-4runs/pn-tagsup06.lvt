\ExplSyntaxOn
\sys_gset_rand_seed:n {1000} % before tagging is loaded
\ExplSyntaxOff

\DocumentMetadata
  {
    testphase=phase-III,
    pdfversion=2.0,
    xmp=false,
    debug={log=v,tagpdf},
    uncompress,
  }

\documentclass{article}

\input{regression-test}

\ExplSyntaxOn
\debug_on:n { check-declarations , deprecation }
\ExplSyntaxOff

% Ensure the same font across check engines
\usepackage[OT1]{fontenc}
\renewcommand\rmdefault{cmr}
\renewcommand\sfdefault{cmss}
\renewcommand\ttdefault{cmtt}

% same test as pn-tagsup04, but with listenv=none

\usepackage{postnotes}
\postnotesetup{listenv=none}

\usepackage{zref-user,zref-hyperref}
\usepackage{hyperref}

\begin{document}

\section{Section 1}

\textsuperscript{avoid font warning}

\START

\BEGINTEST{Postnote 1}
\setbox0=\hbox{%
  \postnote[label=en:mark:1,zlabel=zen:mark:1]{\label{en:text:1}\zlabel{zen:text:1}1}}%
\showbox0
\box0
\ENDTEST

\BEGINTEST{Postnoterefs 1}
\setbox0=\hbox{\postnoteref{en:text:1}}%
\showbox0
\box0

\setbox0=\hbox{\postnotezref{zen:text:1}}%
\showbox0
\box0

\setbox0=\hbox{\postnoteref{en:mark:1}}%
\showbox0
\box0

\setbox0=\hbox{\postnotezref{zen:mark:1}}%
\showbox0
\box0
\ENDTEST

\BEGINTEST{Postnote 2}
\setbox0=\hbox{%
  \postnote[label=en:mark:2,zlabel=zen:mark:2]{\label{en:text:2}\zlabel{zen:text:2}2}}%
\showbox0
\box0
\ENDTEST

\BEGINTEST{Postnoterefs 2}
\setbox0=\hbox{\postnoteref{en:text:2}}%
\showbox0
\box0

\setbox0=\hbox{\postnotezref{zen:text:2}}%
\showbox0
\box0

\setbox0=\hbox{\postnoteref{en:mark:2}}%
\showbox0
\box0

\setbox0=\hbox{\postnotezref{zen:mark:2}}%
\showbox0
\box0
\ENDTEST

\BEGINTEST{Postnote 3}
\setbox0=\hbox{%
  \postnote{first par \par second par \newpage next page}}%
\showbox0
\box0
\ENDTEST

\OMIT

\cleardoublepage{}

\TIMO

\BEGINTEST{Print postnotes}
\showoutput
\printpostnotes
\newpage
\ENDTEST

% There must be a better/cleaner way to do this, but I can't seem to get
% tagpdf to report on the Refs numbers, which is critical from our point of
% view.  So we go for tagpdf's raw data.  Just a test file, it won't blow in
% anyone's hands but mine.
\ExplSyntaxOn
\cs_new:Npn \__postnotes_test_tagsup_object_from_Ref_label:n #1
  {
    \tag_struct_object_ref:e
      { \prop_item:Nn \g__tag_struct_label_num_prop {#1} }
  }
\AddToHook { enddocument/end }
  {
    \TIMO
    \BEGINTEST{Check~references}
    \int_step_inline:nn { \tag_get:n { struct_counter } }
      {
        \prop_if_exist:cT { g__tag_struct_#1_prop }
          {
            \tl_set:Ne \l_tmpa_tl
              { PDF~object~of~structnum~#1~is~\tag_struct_object_ref:n {#1} }
            \tl_show:N \l_tmpa_tl
            \prop_show:c { g__tag_struct_#1_prop }
            \prop_get:cnNT { g__tag_struct_#1_prop } { S } \l_tmpa_tl
              {
                \bool_lazy_any:nT
                  {
                    { \str_if_eq_p:Vn \l_tmpa_tl { /endnote } }
                    { \str_if_eq_p:Vn \l_tmpa_tl { /endnotemark } }
                  }
                  {
                    \group_begin:
                    \seq_clear:N \l_tmpa_seq
                    \cs_set_eq:NN \__tag_struct_Ref_label:nN
                      \__postnotes_test_tagsup_object_from_Ref_label:n
                    \cs_set_eq:NN \__tag_struct_Ref_obj:nN \use:n
                    \prop_get:cnNT { g__tag_struct_#1_prop } { Ref }
                      \l_tmpb_tl
                      {
                        \clist_set:NV \l_tmpa_clist \l_tmpb_tl
                        \clist_map_inline:Nn \l_tmpa_clist
                          { \seq_put_right:Ne \l_tmpa_seq {##1} }
                        \tl_set:Ne \l_tmpb_tl
                          { PDF~object~of~Refs:~\seq_use:Nn \l_tmpa_seq {,~} }
                        \tl_show:N \l_tmpb_tl
                      }
                    \group_end:
                  }
              }
          }
      }
    \ENDTEST
    \OMIT
  }
\ExplSyntaxOff

\OMIT

\end{document}
